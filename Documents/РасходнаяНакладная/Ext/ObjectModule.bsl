
Процедура ОбработкаПроведения(Отказ, Режим)
	
	//Регистр расчётов с покупателями	
#Область ДЗ_4	
	Движения.РасчетыСПокупателями.Записывать = Истина;
	Движение = Движения.РасчетыСПокупателями.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.СуммаДолга =  Товары.Итог("Сумма");
#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	СУММА(Количество) КАК Количество,
	|	Сумма(Сумма) КАК Сумма
	|ПОМЕСТИТЬ ДокТЧ
	|ИЗ
	|	Документ.РасходнаяНакладная.Товары КАК РасходнаяНакладнаяТовары
	|ГДЕ
	|	Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|;
	|ВЫБРАТЬ * ИЗ ДокТЧ";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//ставим маркер записи в регистр остатков
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	//формируем движение с остатками
	Пока Выборка.Следующий() Цикл 
		
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Номенклатура = Выборка.Номенклатура;
		Движение.Склад = Склад;
		Движение.Количество = Выборка.Количество;
		                            	
	КонецЦикла; 
	
	//Сейчас пойдёт обусловленное проведение - чтобы не ушли в минус. Сначала запишу  
	//обороты, сверю и в случае чего сделаю отмену проведения.
	//&Склад = Склад для отбора по складам.

	//ставим блокировку, пишем в регистры остатков и взаиморасчётов
	
	Движения.ОстаткиТоваров.БлокироватьДляИзменения = Истина;
	Движения.Записать();
	
	//Убираем запрос, чтобы не убивать ДокТЧ
	//Запрос = Новый Запрос;
	
	//получаем остатки из регистра
	
	Запрос.Текст = "ВЫБРАТЬ
	|  ОстаткиТоваровОстатки.Номенклатура,
	|  ОстаткиТоваровОстатки.КоличествоОстаток
	|ИЗ
	|  РегистрНакопления.ОстаткиТоваров.Остатки(&МоментВремени, Склад = &Склад
	|    И Номенклатура В
	|      (ВЫБРАТЬ 
	|		  ДокТЧ.Номенклатура
	|       ИЗ
	|         ДокТЧ КАК ДокТЧ)) КАК ОстаткиТоваровОстатки
	|ГДЕ
	|  ОстаткиТоваровОстатки.КоличествоОстаток < 0";
	
	//А тут уже условие по времени, чтобы можно было проводить документы задним числом, даже если по итогу уйдём в минус. 
	//Более подробно в конспекте.
	
	Граница = Новый Граница(МоментВремени(),ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени", Граница);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//проверяем наличие нужного количества товара на складе
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		Отказ = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
  			Сообщить("Мало товара " + Выборка.Номенклатура + " нужно ещё " + (-Выборка.КоличествоОстаток));
		КонецЦикла

	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	//мы сначала читаем остатки а потом пишем движения. соответственно заблокировать мы не можем. 
	//Потому что нет движений нет инфы о том, что будет записано. Ставим блокировку сами
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	//если перепроводится
	Движения.СтоимостьТоваров.БлокироватьДляИзменения = Истина;
	
	
	//Т.к. оперативный и удаляется только при отмене проведения, то пишем пустой регистр пока, чтобы убрать старые движения.
	Движения.СтоимостьТоваров.Записать();
	
	//Теперь старые движения убраны и система начнёт расчёт 
	
	Запрос.Текст = "ВЫБРАТЬ
	                 |	СтоимостьТоваровОстатки.Номенклатура КАК Номенклатура,
					 |  СтоимостьТоваровОстатки.Партия КАК Партия,
	                 |	СтоимостьТоваровОстатки.КоличествоОстаток КАК КоличествоОстаток,
	                 |	СтоимостьТоваровОстатки.СтоимостьОстаток КАК СтоимостьОстаток
	                 |ПОМЕСТИТЬ Остатки
	                 |ИЗ
	                 |	РегистрНакопления.СтоимостьТоваров.Остатки(&МоментВремени,
	                 |			Номенклатура В
	                 |				(ВЫБРАТЬ
	                 |					ДокТЧ.Номенклатура КАК Номенклатура
	                 |				ИЗ
	                 |					ДокТЧ КАК ДокТЧ)) КАК СтоимостьТоваровОстатки
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	ДокТЧ.Номенклатура КАК Номенклатура,
					 |	ДокТЧ.Количество КАК Количество,
	                 |  ДокТЧ.Сумма КАК Выручка,
					 |  Остатки.Партия КАК Партия,
	                 |	ЕстьNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	                 |	Остатки.СтоимостьОстаток КАК СтоимостьОстаток
	                 |ИЗ
	                 |	ДокТЧ КАК ДокТЧ
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	                 |		ПО ДокТЧ.Номенклатура = Остатки.Номенклатура
					 |УПОРЯДОЧИТЬ ПО
					 |	Остатки.Партия.МоментВремени //FIFO
					 |ИТОГИ
					 |	МИНИМУМ(Количество),
					 |  МИНИМУМ(Выручка),
					 |	СУММА(КоличествоОстаток)
					 |ПО
					 |	Номенклатура";
	
	Запрос.УстановитьПараметр("МоментВремени",МоментВремени());
	Результат = Запрос.Выполнить();
	ВыборкаТовар = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТовар.Следующий() Цикл
		
		Если ВыборкаТовар.КоличествоОстаток < ВыборкаТовар.Количество Тогда 
			Сообщить("Проблемы со складом - товара нет вообще.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ВыборкаПартия = ВыборкаТовар.Выбрать();
		ОсталосьСписать = ВыборкаТовар.Количество;
		
		СебестоимостьИтого = 0;
		
		Пока ВыборкаПартия.Следующий() И ОсталосьСписать <> 0 Цикл
			Списать = МИН(ОсталосьСписать, ВыборкаПартия.КоличествоОстаток);
			
			Себестоимость = Списать / ВыборкаПартия.КоличествоОстаток * ВыборкаПартия.СтоимостьОстаток;
			СебестоимостьИтого = СебестоимостьИтого + Себестоимость;
			
			Движение = Движения.СтоимостьТоваров.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Партия = ВыборкаПартия.Партия;
			Движение.Количество = Списать;
			Движение.Стоимость = Себестоимость;
			
			ОсталосьСписать = ОсталосьСписать - Списать;
			
		КонецЦикла;
		
		Движение = Движения.Продажи.Добавить();
		Движение.Период = Дата;
		Движение.Номенклатура = ВыборкаТовар.Номенклатура;
		Движение.Контрагент = Контрагент;
		Движение.Количество = ВыборкаТовар.Количество;
		Движение.Себестоимость = Себестоимость;
		Движение.Выручка = ВыборкаТовар.Выручка;
		
	КонецЦикла;
	
	Движения.СтоимостьТоваров.Записывать = Истина;
	Движения.Продажи.Записывать = Истина;
	
#Область БухПоСреднемуБезСклада

//	Движения.РегистрБухгалтерии.Записать(); //очищаем старое перед чтением итогов
//	
//	Запрос.Текст =  "ВЫБРАТЬ
//	                |	ДокТЧ.Номенклатура КАК Номенклатура,
//	                |	ДокТЧ.Количество КАК Количество,
//	                |	РегистрБухгалтерииОстатки.СуммаОстаток КАК СуммаОстаток,
//	                |	ISNULL(РегистрБухгалтерииОстатки.КоличествоОстаток,0) КАК КоличествоОстаток
//	                |ИЗ
//	                |	ДокТЧ КАК ДокТЧ
//	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.РегистрБухгалтерии.Остатки(
//	                |				&МоментВремени,
//	                |				Счет = &Счет,
//	                |				&МассивСубконто,
//	                |				Субконто1 В
//	                |						(ВЫБРАТЬ
//	                |							ДокТЧ.Номенклатура
//	                |						ИЗ
//	                |							ДокТЧ КАК ДокТЧ)
//	                |					И Субконто2 = &Склад) КАК РегистрБухгалтерииОстатки
//	                |		ПО ДокТЧ.Номенклатура = РегистрБухгалтерииОстатки.Субконто1";
//	
//	Запрос.УстановитьПараметр("Счет", ПланыСчетов.ПланСчетов.ТоварыНаСкладах);
//	
//	Массив = Новый Массив(2);
//	Массив[0] = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
//	Массив[1] = ПланыВидовХарактеристик.ВидыСубконто.Склады;
//	Запрос.УстановитьПараметр("МассивСубконто", Массив);
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Если Выборка.Количество > Выборка.КоличествоОстаток Тогда
//			Сообщить("Мало товара" + Выборка.Номеклатура);
//			Отказ = Истина;
//		КонецЕсли;
//		
//		Если Отказ Тогда
//			Прервать;			
//		КонецЕсли;
//		
//		Себестоимость = Выборка.Количество / Выборка.КоличествоОстаток * Выборка.СуммаОстаток;
//		
//		//Проводки списания себестоимости товаров
//		Проводка = Движения.РегистрБухгалтерии.Добавить();
//		Проводка.Период = Дата;
//		Проводка.СчетДт = ПланыСчетов.ПланСчетов.СебестоимостьРеализованнойПродукции;
//		Проводка.СчетКт = ПланыСчетов.ПланСчетов.ТоварыНаСкладах;
//		
//		//аналитика списания себестоимости
//		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;
//		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Склад;
//		
//		//Числовые показатели
//		Проводка.КоличествоКт = Выборка.Количество;
//		Проводка.Сумма = Себестоимость;
//		
//	КонецЦикла;
//	
//	Движения.РегистрБухгалтерии.Записывать = Истина;
//	//регистрация долга покупателя
//	Проводка = Движения.РегистрБухгалтерии.Добавить();
//	Проводка.Период = Дата;
//	Проводка.СчетДт = ПланыСчетов.ПланСчетов.РасчетыСПокупателямиИЗаказчиками;
//	Проводка.СчетКт = ПланыСчетов.ПланСчетов.ВыручкаОтРеализацииПродукцииТоваровРаботУслуг;
//	Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Контрагент;
//	Проводка.Сумма = Товары.Итог("Сумма");
//	
#КонецОбласти

#Область БухПоСреднемуПоСкладам

	Движения.РегистрБухгалтерии.Записать(); //очищаем старое перед чтением итогов
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ДокТЧ.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ДокТЧ.Количество) КАК Количество,
	|	СУММА(РегистрБухгалтерииОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РегистрБухгалтерииОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА РегистрБухгалтерииОстатки.Субконто2 = &Склад
	|				ТОГДА РегистрБухгалтерииОстатки.КоличествоОстаток
	|		КОНЕЦ) КАК ОстатокПоСкладу
	|ИЗ
	|	ДокТЧ КАК ДокТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.РегистрБухгалтерии.Остатки(
	|				&МоментВремени,
	|				Счет = &Счет,
	|				&МассивСубконто,
	|				Субконто1 В
	|					(ВЫБРАТЬ
	|						ДокТЧ.Номенклатура
	|					ИЗ
	|						ДокТЧ КАК ДокТЧ)) КАК РегистрБухгалтерииОстатки
	|		ПО ДокТЧ.Номенклатура = РегистрБухгалтерииОстатки.Субконто1
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТЧ.Номенклатура";
	
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.ПланСчетов.ТоварыНаСкладах);
	
	Массив = Новый Массив(2);
	Массив[0] = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
	Массив[1] = ПланыВидовХарактеристик.ВидыСубконто.Склады;
	Запрос.УстановитьПараметр("МассивСубконто", Массив);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество > Выборка.ОстатокПоСкладу Тогда
			Сообщить("Мало товара" + Выборка.Номеклатура);
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;			
		КонецЕсли;
		
		Себестоимость = Выборка.Количество / Выборка.КоличествоОстаток * Выборка.СуммаОстаток;
		
		//Проводки списания себестоимости товаров
		Проводка = Движения.РегистрБухгалтерии.Добавить();
		Проводка.Период = Дата;
		Проводка.СчетДт = ПланыСчетов.ПланСчетов.СебестоимостьРеализованнойПродукции;
		Проводка.СчетКт = ПланыСчетов.ПланСчетов.ТоварыНаСкладах;
		
		//аналитика списания себестоимости
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Склад;
		
		//Числовые показатели
		Проводка.КоличествоКт = Выборка.Количество;
		Проводка.Сумма = Себестоимость;
		
	КонецЦикла;
	
	Движения.РегистрБухгалтерии.Записывать = Истина;
	//регистрация долга покупателя
	Проводка = Движения.РегистрБухгалтерии.Добавить();
	Проводка.Период = Дата;
	Проводка.СчетДт = ПланыСчетов.ПланСчетов.РасчетыСПокупателямиИЗаказчиками;
	Проводка.СчетКт = ПланыСчетов.ПланСчетов.ВыручкаОтРеализацииПродукцииТоваровРаботУслуг;
	Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Контрагент;
	Проводка.Сумма = Товары.Итог("Сумма");
	
#КонецОбласти
	
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		Договор = ДанныеЗаполнения.Договор;
		
		Для каждого стр из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		КонецЦикла;
		
	КонецЕсли;

	
КонецПроцедуры

