
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.РасчетыСПокупателями.Записывать = Истина;
	Движение = Движения.РасчетыСПокупателями.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.ЮрЛицо = ЮрЛицо;
	Движение.Контрагент = Контрагент;
	Движение.СуммаДолга =  Товары.Итог("Сумма");
	
#Область СебестоимостьФИФО
	
	Если ЮрЛицо.УчетСтоимости = Перечисления.УчетСтоимости.ФИФО Тогда 
		
		// Начинаем смотреть хватает ли товара, делаем запрос
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура,
		|	Количество КАК Количество,
		|	Сумма КАК Сумма,
		|	СчетУчета КАК СчетУчета
		|ПОМЕСТИТЬ ДокТЧ
		|ИЗ
		|	Документ.РасходнаяНакладная.Товары КАК РасходнаяНакладнаяТовары
		|ГДЕ
		|	Ссылка = &Ссылка
		|;
		|ВЫБРАТЬ * ИЗ ДокТЧ";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		// Ставим маркер записи в регистр остатков
		Движения.ОстаткиТоваров.Записывать = Истина;
		
		//формируем движение с остатками
		Пока Выборка.Следующий() Цикл 
			
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.ЮрЛицо = ЮрЛицо;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Склад = Склад;
			Движение.Количество = Выборка.Количество;
			
		КонецЦикла; 
		
		// Сейчас пойдёт обусловленное проведение - чтобы не ушли в минус. Сначала запишу  
		// обороты, сверю и в случае чего сделаю отмену проведения.
		// &Склад = Склад для отбора по складам.
		
		// ставим блокировку, пишем в регистры остатков и взаиморасчётов
		// при записи сразу заблокируется таблица, чтобы больше никто ничего не записал.
		
		Движения.ОстаткиТоваров.БлокироватьДляИзменения = Истина;
		Движения.Записать();
		
		// Нет нового запроса, чтобы не убивать ДокТЧ
		// получаем остатки из регистра
		Запрос.Текст = "ВЫБРАТЬ
		|  ОстаткиТоваровОстатки.Номенклатура,
		|  ОстаткиТоваровОстатки.КоличествоОстаток
		|ИЗ
		|  РегистрНакопления.ОстаткиТоваров.Остатки(&ВремяОстатков, Склад = &Склад
		|    И Номенклатура В
		|      (ВЫБРАТЬ 
		|		  ДокТЧ.Номенклатура
		|       ИЗ
		|         ДокТЧ КАК ДокТЧ)) КАК ОстаткиТоваровОстатки
		|ГДЕ
		|  ОстаткиТоваровОстатки.КоличествоОстаток < 0";
		
		// Условие по времени, чтобы выбирались остатки после проведения документа. 
		
		Граница = Новый Граница(МоментВремени(),ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ВремяОстатков", Граница);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		// Проверяем наличие нужного количества товара на складе
		
		Если НЕ ЮрЛицо.УходВМинус И НЕ РезультатЗапроса.Пустой() Тогда 
			
			Отказ = Истина;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сообщить("Мало товара " + Выборка.Номенклатура + " нужно ещё " + (-Выборка.КоличествоОстаток));
			КонецЦикла
			
		КонецЕсли;
		
		// Если не хватает товара, прекращаем проведение
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
		
		// Мы сначала читаем стоимость остатков, а потом пишем движения. Соответственно заблокировать во время чтения 
		// одним флагом мы не можем (ставится во время записи). Ставим блокировку сами
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьТоваров");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Товары;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		Блокировка.Заблокировать();
		
		// если перепроводится
		Движения.СтоимостьТоваров.БлокироватьДляИзменения = Истина;
		
		// Если оперативный, то удаляется только при отмене проведения - пишем пустой регистр пока, чтобы убрать старые движения.
		Движения.СтоимостьТоваров.Записать();
		
		// Теперь старые движения убраны и система начнёт расчёт себестоимости по методу ФИФО
		Запрос.Текст = "ВЫБРАТЬ
		|	СтоимостьТоваровОстатки.Номенклатура КАК Номенклатура,
		|   СтоимостьТоваровОстатки.Партия КАК Партия,
		|	СтоимостьТоваровОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	СтоимостьТоваровОстатки.СтоимостьОстаток КАК СтоимостьОстаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрНакопления.СтоимостьТоваров.Остатки(&ВремяСтоимостиТоваров,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					ДокТЧ.Номенклатура КАК Номенклатура
		|				ИЗ
		|					ДокТЧ КАК ДокТЧ)) КАК СтоимостьТоваровОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокТЧ.Номенклатура КАК Номенклатура,
		|	ДокТЧ.Количество КАК Количество,
		|   ДокТЧ.Сумма КАК Выручка,
		|   ДокТЧ.СчетУчета КАК СчетУчета,
		|   Остатки.Партия КАК Партия,
		|	ЕстьNULL(Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	Остатки.СтоимостьОстаток КАК СтоимостьОстаток
		|ИЗ
		|	ДокТЧ КАК ДокТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО ДокТЧ.Номенклатура = Остатки.Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	Остатки.Партия.МоментВремени
		|ИТОГИ
		|	МИНИМУМ(Количество),
		|   МИНИМУМ(Выручка),
		|	СУММА(КоличествоОстаток)
		|ПО
		|	Номенклатура";
		
		// Время ставим НЕ включая проведение, чтобы знать сколько было товара ДО списания,
		// сколько взяли и по пропорции подсчитать.
		Запрос.УстановитьПараметр("ВремяСтоимостиТоваров",МоментВремени());
		Результат = Запрос.Выполнить();
		ВыборкаТовар = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТовар.Следующий() Цикл
			
			Если ВыборкаТовар.КоличествоОстаток < ВыборкаТовар.Количество Тогда 
				Сообщить("Проблемы со складом.");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ВыборкаПартия = ВыборкаТовар.Выбрать();
			ОсталосьСписать = ВыборкаТовар.Количество;
			
			СебестоимостьИтого = 0;
			
			Пока ВыборкаПартия.Следующий() И ОсталосьСписать <> 0 Цикл
				Списать = МИН(ОсталосьСписать, ВыборкаПартия.КоличествоОстаток);
				
				Себестоимость = Списать / ВыборкаПартия.КоличествоОстаток * ВыборкаПартия.СтоимостьОстаток;
				СебестоимостьИтого = СебестоимостьИтого + Себестоимость;
				
				Движение = Движения.СтоимостьТоваров.ДобавитьРасход();
				Движение.Период = Дата;
				Движение.ЮрЛицо = ЮрЛицо;
				Движение.Номенклатура = Выборка.Номенклатура;
				Движение.Партия = ВыборкаПартия.Партия;
				Движение.Количество = Списать;
				Движение.Стоимость = Себестоимость;
				
				// Себестоимость товара
				Проводка = Движения.РегистрБухгалтерии.Добавить();
				Проводка.Период = Дата;
				Проводка.ЮрЛицо = ЮрЛицо;
				Проводка.СчетДт = ПланыСчетов.ПланСчетов.С90с4;
				Проводка.СчетКт = ВыборкаПартия.СчетУчета;
				Проводка.СубконтоКт.Номенклатура = Выборка.Номенклатура;
				Проводка.СубконтоКт.Склад = Склад;
				Проводка.КоличествоКт = Выборка.Количество;
				Проводка.Сумма = Себестоимость;
				
				ОсталосьСписать = ОсталосьСписать - Списать;
				
			КонецЦикла;
			
			Движение = Движения.Продажи.Добавить();
			Движение.Период = Дата;
			Движение.ЮрЛицо = ЮрЛицо;
			Движение.Номенклатура = ВыборкаТовар.Номенклатура;
			Движение.Контрагент = Контрагент;
			Движение.Количество = ВыборкаТовар.Количество;
			Движение.Себестоимость = СебестоимостьИтого;
			Движение.Выручка = ВыборкаТовар.Выручка;
			
			Движения.Продажи.Записывать = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
#КонецОбласти

#Область СебестоимостьПоСтоимости
	Если ЮрЛицо.УчетСтоимости = Перечисления.УчетСтоимости.Себестоимость Тогда
		
		// Проверка наличия на складе
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура,
		|	ЦенаПокупки КАК ЦенаПокупки,
		|	Количество КАК Количество,
		|	СебестоимостьТовара КАК СебестоимостьТовара,
		|	Сумма КАК Сумма
		|ПОМЕСТИТЬ ДокТЧ
		|ИЗ
		|	Документ.РасходнаяНакладная.Товары КАК РасходнаяНакладнаяТовары
		|ГДЕ
		|	Ссылка = &Ссылка
		|;
		|ВЫБРАТЬ * ИЗ ДокТЧ";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Движения.СтоимостьТоваровПоФакту.Записывать = Истина;
		
		Пока Выборка.Следующий() Цикл
			Движение = Движения.СтоимостьТоваровПоФакту.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.ЮрЛицо = ЮрЛицо;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Цена = Выборка.ЦенаПокупки;
			Движение.Склад = Склад;
			Движение.Количество = Выборка.Количество;
			Движение.Стоимость = Выборка.СебестоимостьТовара;
		КонецЦикла;
		
		Движения.СтоимостьТоваровПоФакту.БлокироватьДляИзменения = Истина;
		Движения.Записать();
		
		Запрос.Текст = "ВЫБРАТЬ
		|  ОстаткиТоваровОстатки.Номенклатура,
		|  ОстаткиТоваровОстатки.Цена,
		|  ОстаткиТоваровОстатки.КоличествоОстаток
		|ИЗ
		|  РегистрНакопления.СтоимостьТоваровПоФакту.Остатки(&ВремяОстатков, Склад = &Склад
		|    И ЮрЛицо = &ЮрЛицо И Номенклатура В
		|      (ВЫБРАТЬ 
		|		  ДокТЧ.Номенклатура
		|       ИЗ
		|         ДокТЧ КАК ДокТЧ)) КАК ОстаткиТоваровОстатки
		|ГДЕ
		|  ОстаткиТоваровОстатки.КоличествоОстаток < 0";
		
		
		// Условие по времени, чтобы выбирались остатки после проведения документа. 
		
		Граница = Новый Граница(МоментВремени(),ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ВремяОстатков", Граница);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		// Сообщим, чего не хватает
		Если НЕ ЮрЛицо.УходВМинус И НЕ РезультатЗапроса.Пустой() Тогда 
			
			Отказ = Истина;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сообщить("Мало товара " + Выборка.Номенклатура + " с ценой покупки " + Выборка.Цена + ", нужно ещё " + (-Выборка.КоличествоОстаток));
			КонецЦикла
			
		КонецЕсли;
		
		// Если не хватает товара, прекращаем проведение
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
			
		
		// Расчёт себестоимости
		Для каждого СТР Из Товары Цикл
			
			Проводка = Движения.РегистрБухгалтерии.Добавить();
			Проводка.Период = Дата;
			Проводка.ЮрЛицо = ЮрЛицо;
			Проводка.СчетДт = ПланыСчетов.ПланСчетов.С90с4;
			Проводка.СчетКт = СТР.СчетУчета;
			Проводка.Сумма = СТР.СебестоимостьТовара;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = СТР.Номенклатура;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Склады] = Склад;
			Проводка.КоличествоКт = СТР.Количество;
		
		КонецЦикла;
				
	КонецЕсли;
#КонецОбласти

#Область СебестоимостьПоСреднему
	Если ЮрЛицо.УчетСтоимости = Перечисления.УчетСтоимости.Средневзвешенное Тогда
		
		Сообщить("Для учета по среднему модуль ещё не написан, документ не нашёл отражения в учете");
		
	КонецЕсли;
#КонецОбласти
	
	Движения.РегистрБухгалтерии.Записывать = Истина;
	
	// Регистрация долга покупателя
	Проводка = Движения.РегистрБухгалтерии.Добавить();
	Проводка.Период = Дата;
	Проводка.ЮрЛицо = ЮрЛицо;
	Проводка.СчетДт = ПланыСчетов.ПланСчетов.С62;
	Проводка.СчетКт = ПланыСчетов.ПланСчетов.С90с1;
	Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Контрагенты] = Контрагент;
	Проводка.Сумма = Товары.Итог("СуммаСНДС");
	
	// НДС
	Проводка = Движения.РегистрБухгалтерии.Добавить();
	Проводка.Период = Дата;
	Проводка.ЮрЛицо = ЮрЛицо;
	Проводка.СчетДт = ПланыСчетов.ПланСчетов.С90с2;
	Проводка.СчетКт = ПланыСчетов.ПланСчетов.С68с2;
	Проводка.Сумма = Товары.Итог("СуммаНДС");
	
КонецПроцедуры


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		Контрагент = ДанныеЗаполнения.Контрагент;
		Договор = ДанныеЗаполнения.Договор;
		
		Для каждого стр из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

